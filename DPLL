#include <iostream> 
#include <vector>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>
#include <optional>
using namespace std;

//CNF Formula Structure 
using Clause = vector<int>;
using Formula = vector<Clause>;

void simplify(Formula &formula, int literal){
    Formula simplified;

    for (const auto &clause : formula) {
        //if the clause contains the literal, skip it
        if (find(clause.begin(), clause.end(), literal) != clause.end())
            continue;

        Clause newClause;
        for (int lit : clause) {
            //ignore the negation of the literal, add the rest
            if (lit != -literal) newClause.push_back(lit);
        }

        //if we ignored all the literals in clause, unsatsifable
        if (newClause.empty()){
            formula = {{}};
            return;
        }
        
        simplified.push_back(newClause);
    }
    formula = move(simplified);
}

optional<int> findUnitClause(const Formula &formula){
    for (const auto &clause : formula) {
        // returns the first literal if singleton 
        if (clause.size() == 1) 
            return clause[0];         
    }

    return nullopt;
}

void pureLiteralElimination(Formula &formula, unordered_set<int> & assignments){
    unordered_map<int, int> literalCount;
    unordered_set<int> pureLiterals;

    for(const auto &clause : formula){
        for(int literal : clause){
            literalCount[literal]++;
        }
    }

    for(const auto & literal : literalCount){
        if(!literalCount.count(-literal.first)){
            pureLiterals.insert(literal.first);
        }
    }

    for(const auto &literal : pureLiterals){
        assignments.insert(literal);
        simplify(formula, literal);
    }
}

bool dpll(Formula formula, unordered_set<int> &assignments) {
    if(formula.empty()) {
        return true;
    }

    for (const auto &clause : formula) {
        if (clause.empty()) {
            return false;
        }
    }

    auto unit = findUnitClause(formula);
    while (unit) {
        int literal = *unit;
        assignments.insert(literal);
        simplify(formula, literal);
        unit = findUnitClause(formula);
    }

    if(formula.empty()) {
        return true;
    }

    pureLiteralElimination(formula, assignments);

    int chosenLiteral = formula[0][0];
    Formula simplifiedFormula = formula;

    simplify(simplifiedFormula, chosenLiteral);
    assignments.insert(chosenLiteral);

    if (dpll(simplifiedFormula, assignments)) {
        return true;
    }
    assignments.erase(chosenLiteral);

    simplifiedFormula = formula; 

    simplify(simplifiedFormula, -chosenLiteral);
    assignments.insert(-chosenLiteral);

    if (dpll(simplifiedFormula, assignments)){
        return true;
    }
    assignments.erase(-chosenLiteral);

    return false; 
}

int main() {
    Formula formula = {{1, 2}, {-1, 3}, {-2, -3}};

    unordered_set<int> assignments;

    if(dpll(formula, assignments)) {
        cout << "Satisfiable <3\nAssignments:";
        for(int literal : assignments) {
            cout << literal << " ";
        }
        cout << endl;
    }
    else {
        cout << "Unsatisfiable :(\n";
    }

    return 0;
}
